---
export interface Props {
  id: string;
  imageCard: string;
  title: string;
  text: string;
  cost: string;
  additionalImgs: string[];
}

const { id, imageCard, title, text, cost, additionalImgs } = Astro.props;
---

<div class={`card-container ${id}`}>
  <div class="img-container">
    <img src={imageCard} alt="Imagen Principal" class={`carousel-image active ${id} main-img`} data-id={id} loading="lazy" />

    {additionalImgs.map((imageSrc, index) => (
      <img src={imageSrc} alt={`Imagen ${index + 1}`} class={`carousel-image ${id}`} data-id={id} loading="lazy" />
    ))}
  </div>

  <p class="title">{title}</p>
  <p class="cost">{cost}</p>
  <p class="text">{text}</p>
</div>

<script type="module" define:vars={{ id }}>
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector(`.${id}`);
    if (container) {
      let currentImageIndex = 0;
      let interval;
      const images = container.querySelectorAll(`.carousel-image.${id}`);

      const nextImage = () => {
        images[currentImageIndex].classList.remove('active');
        currentImageIndex = (currentImageIndex + 1) % images.length;
        images[currentImageIndex].classList.add('active');
      };

      document.addEventListener('mouseover', (event) => {
        if (event.target.closest(`.card-container.${id}`)) {
          // Iniciar el carrusel solo si el mouseover ocurre dentro de .card-container
          if (!interval) {
            nextImage(); // Ejecutar una vez para iniciar el carrusel y evitar el retraso inicial
            interval = setInterval(nextImage, 2000);
          }
        }
      });

    document.addEventListener('mouseout', (event) => {
      if (event.target.closest(`.card-container.${id}`)) {
          // Detener el carrusel solo si el mouseout ocurre dentro de .card-container
          clearInterval(interval);
          interval = null; // Resetear el intervalo para evitar múltiples instancias
          images.forEach(img => img.classList.remove('active'));
          images[0].classList.add('active'); // Vuelve a la imagen original
        }
    });
  }
  });
</script>
<style>
 /* Estilos para el contenedor de la tarjeta */
 .card-container {
    display: grid;
    align-items: center;
    break-inside: avoid;
    margin-bottom: 30px;
    width: 90%;
  }

  .img-container {
    position: relative;
    width: 100%;
    height: auto;
    overflow: hidden;
  }

  /* Estilos para las imágenes del carousel */
  .card-container img {
    position: absolute;
    width: 100%;
    height: auto;
    margin-bottom: 10px;
    top: 0;
    left: 0;
    opacity: 0;
    transition: opacity 1s ease-in-out; /* Transición suave de la opacidad */
  }

  .card-container img.active {
    opacity: 1;
    z-index: -100;
  }

  .main-img {
    position: relative !important;
    opacity: 1;
  }

  /* Estilos para el contenido de la tarjeta */
  .card-container p {
    margin: 0px;
  }
  .title {
    font-size: 35px;
    font-family: "Montserrat", sans-serif;
  }
  .cost {
    font-size: 30px;
  }
  .text {
    font-size: 20px;
    color: #000000b3;
  }
</style>
